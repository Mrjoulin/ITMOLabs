			ORG 0x419

AC_VAL: 	WORD 0x1111

TESTS_NUM: 	WORD 0x0003

TESTS_LEFT: WORD 0x0000
CUR_CELL: 	WORD $TEST1_C

TEST1_C:	WORD 0x0
TEST1_VAL: 	WORD 0x3333
TEST1_VANS: WORD 0x0
TEST1_ANS: 	WORD 0x4444

TEST2_C:	WORD 0x1
TEST2_VAL: 	WORD 0x3333
TEST2_VANS: WORD 0x0
TEST2_ANS: 	WORD 0x4445

TEST3_C:	WORD 0x1
TEST3_VAL: 	WORD 0x6EEE
TEST3_VANS: WORD 0x1
TEST3_ANS: 	WORD 0x8000


START:	CLA
		CALL SET_UP
		BNE MAIN 
		HLT

MAIN:	CLC
		LD (CUR_CELL)+
		BEQ PROCESS	; если регистр переноса должен быть не 0
		CMC 		; инверитруем регистр переноса
PROCESS: LD $AC_VAL	; загружаем значение AC

		WORD 0x9AE9	; выполняем операцию

		LD (CUR_CELL)+
		BVS CHECKV
		BNE MOVEON
		CALL SET_TRUE
		JUMP CHECK
CHECKV:	BEQ MOVEON
		CALL SET_TRUE

CHECK:	LD (CUR_CELL)+
		CMP (CUR_CELL)+

		BNE MOVEON		; проверяем корректность выполнения
		CALL SET_TRUE	

MOVEON:	LOOP $TESTS_LEFT
		JUMP MAIN

FINAL:	CALL SET_UP

		LD (CUR_TEST_RES)

GETRES:	AND (CUR_TEST_RES)+
		AND (CUR_TEST_RES)+
		LOOP $TESTS_LEFT
		JUMP GETRES

		ST (CUR_TEST_RES)
		HLT

SET_UP: LD $START_TEST_RES
		ST $CUR_TEST_RES
		LD $TESTS_NUM
		ST $TESTS_LEFT
		RET

SET_TRUE: LD #0x1
		ST (CUR_TEST_RES)+	; устанавливаем результат операции 1
		RET

START_TEST_RES: WORD $TEST1_VRES
CUR_TEST_RES: WORD 0x0

TEST1_VRES:	WORD	0x0
TEST1_RES:	WORD	0x0	
TEST2_VRES:	WORD	0x0
TEST2_RES:	WORD	0x0
TEST3_VRES:	WORD	0x0	
TEST3_RES:	WORD	0x0
TOTAL_RES:	WORD	0x0	
